#!/bin/bash

# CLI user interface
if [ "$1" == "-h" ]; then
    usage="$(basename "$0") [-h] -- program to install all the bokeh dependencies

    where:
        -h     show this help text

        -e     ENVIRONMENT were you want to install the dependencies, defaults to bokeh
        -b     install BUILD dependencies, defauls to true
        -r     install RUN dependencies, defauls to true
        -t     install TEST (and examples) dependencies, defauls to true
        -a     install ADDITIONAL image diff-related packages, defaults to false
    "
    echo "$usage"
    exit 0
fi

# defauls
env=bokeh
build=true
run=true
test=true
add=false

# handling of arguments
while getopts e:b:r:t:a option
do
    case "${option}" in
        e) env=${OPTARG};;
        b) build=${OPTARG};;
        r) run=${OPTARG};;
        t) test=${OPTARG};;
        a) add=true;;
    esac
done

function conda_env_does_not_exist {
    if conda env list | grep "^$1" >/dev/null 2>&1; then
        return 1
    else
        return 0
    fi
}

function conda_build_is_not_installed {
    if python -c 'from conda_build.metadata import MetaData' >/dev/null 2>&1; then
        return 1
    else
        return 0
    fi
}

# if CONDA_RECIPE happens to be set from env, use that path but otherwise use git
# to introspect the toplevel and use conda.recipe directory at the toplevel of the repo
export CONDA_RECIPE=${CONDA_RECIPE:-$(git rev-parse --show-toplevel)/conda.recipe}
function get_value {
    echo $(cat <<EOF | python -
import os
from conda_build.metadata import MetaData
print(" ".join([s.replace(" ", "") for s in MetaData(os.environ['CONDA_RECIPE']).get_value("$1")]))
EOF
    )
}

function conda_install {
    channels=$(echo $(get_value 'extra/channels') | sed -e 's/^\| \+/ -c /g')
    subcmd=install
    if conda_env_does_not_exist "$env"; then
        # TODO create a complete env.yaml and create at once
        #      so that we reduce risk of conflicting deps between
        #      different "sections" of the dependencies
        subcmd=create
    fi
    conda $subcmd -n $env $channels --yes "$@"
}

function install_miniconda {
    MINICONDA_VERSION=${MINICONDA_VERSION:=latest}
    MINICONDA="Miniconda-$MINICONDA_VERSION-Linux-x86_64"
    MINICONDA_URL="http://repo.continuum.io/miniconda/$MINICONDA.sh"

    wget $MINICONDA_URL
    bash $MINICONDA.sh "$@"
    rm -rf $MINICONDA.sh
}

function conda_not_found_in_path {
    if type conda >/dev/null 2>&1; then
        return 1
    else
        return 0
    fi
}


if conda_not_found_in_path; then
    echo "conda is not found in your path. Installing miniconda."
    install_miniconda -p $HOME/miniconda
    source $HOME/miniconda/bin/activate root
fi

if conda_build_is_not_installed; then
    # conda_install requires that conda-build is installed in whatever env you
    # are using to run this script.  If we just installed conda (or you don't have it)
    # install it.
    
    conda install --yes conda-build
fi

if [ "$build" == "true" ]; then
    conda_install $(get_value "requirements/build")
    echo "BUILD dependecies installed."
fi

if [ "$run" == "true" ]; then
    conda_install $(get_value "requirements/run")
    echo "RUN dependecies installed."
fi

if [ "$test" == "true" ]; then
    conda_install $(get_value "test/requires")
    echo "TEST (and examples) dependecies installed."
fi

if [[ "$add" == "true" ]]; then
    conda_install pdiff boto
    echo "Image diff-related dependecies installed."
fi
